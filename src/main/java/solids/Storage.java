package solids;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class Storage extends Contract {
    private static final String BINARY = "60606040526003600055341561001457600080fd5b5b5b5b610c9e806100266000396000f3006060604052361561008a5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662e5561d811461008f578063248bfc3b146100b4578063300ebbf61461015b57806358aa61e71461026657806383197ef0146103145780638e84a8c114610329578063b48cc6e5146103d0578063ff30b71714610435575b600080fd5b341561009a57600080fd5b6100a261051e565b60405190815260200160405180910390f35b34156100bf57600080fd5b61014760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061052495505050505050565b604051901515815260200160405180910390f35b341561016657600080fd5b6101ee60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061060595505050505050565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561022b5780820151818401525b602001610212565b50505050905090810190601f1680156102585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027157600080fd5b61014760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505084359460200135935061077c92505050565b604051901515815260200160405180910390f35b341561031f57600080fd5b610327610958565b005b341561033457600080fd5b6100a260046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650509335935061097392505050565b60405190815260200160405180910390f35b34156103db57600080fd5b61014760046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a5b95505050505050565b604051901515815260200160405180910390f35b341561044057600080fd5b61014760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610ad695505050505050565b604051901515815260200160405180910390f35b60005481565b600060206040519081016040526001846040518082805190602001908083835b6020831061056457805182525b601f199092019160209182019101610544565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020836040518082805190602001908083835b602083106105c957805182525b601f1990920191602091820191016105a9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051506001925050505b92915050565b61060d610bc0565b6001836040518082805190602001908083835b6020831061064057805182525b601f199092019160209182019101610620565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101826040518082805190602001908083835b602083106106a757805182525b601f199092019160209182019101610687565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076e5780601f106107435761010080835404028352916020019161076e565b820191906000526020600020905b81548152906001019060200180831161075157829003601f168201915b505050505090505b92915050565b6000826001866040518082805190602001908083835b602083106107b257805182525b601f199092019160209182019101610792565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020856040518082805190602001908083835b6020831061081757805182525b601f1990920191602091820191016107f7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902060008481526020919091526040908190209190915583906001908790518082805190602001908083835b6020831061089557805182525b601f199092019160209182019101610875565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020856040518082805190602001908083835b602083106108fa57805182525b601f1990920191602091820191016108da565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902060008481526020919091526040902054141561094c57506001610950565b5060005b949350505050565b3373ffffffffffffffffffffffffffffffffffffffff16ff5b565b60006001846040518082805190602001908083835b602083106109a857805182525b601f199092019160209182019101610988565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020836040518082805190602001908083835b60208310610a0d57805182525b601f1990920191602091820191016109ed565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390206000838152602091909152604090205490505b9392505050565b600060206040519081016040526001836040518082805190602001908083835b60208310610a9b57805182525b601f199092019160209182019101610a7b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051506001925050505b919050565b6000816001856040518082805190602001908083835b60208310610b0c57805182525b601f199092019160209182019101610aec565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101846040518082805190602001908083835b60208310610b7357805182525b601f199092019160209182019101610b53565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051610bb7929160200190610bd2565b505b9392505050565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c1357805160ff1916838001178555610c40565b82800160010185558215610c40579182015b82811115610c40578251825591602001919060010190610c25565b5b50610c4d929150610c51565b5090565b610c6f91905b80821115610c4d5760008155600101610c57565b5090565b905600a165627a7a723058209829fd4e89ae7eb395ab7f7babbf8879968b4be42c18bb6e34ecef04c86e6ed20029";

    private Storage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Storage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Uint256> testInt() {
        Function function = new Function("testInt", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addFile(Utf8String _propertyName, Utf8String _fileName) {
        Function function = new Function("addFile", Arrays.<Type>asList(_propertyName, _fileName), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPropertyMetadata(Utf8String _propertyName, Utf8String _key) {
        Function function = new Function("getPropertyMetadata", 
                Arrays.<Type>asList(_propertyName, _key), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> uploadFile(Utf8String _propertyName, Utf8String _fileName, Bytes32 _data, Uint256 count) {
        Function function = new Function("uploadFile", Arrays.<Type>asList(_propertyName, _fileName, _data, count), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> destroy() {
        Function function = new Function("destroy", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bytes32> getFile(Utf8String _propertyName, Utf8String _fileName, Uint256 count) {
        Function function = new Function("getFile", 
                Arrays.<Type>asList(_propertyName, _fileName, count), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addProperty(Utf8String _propertyName) {
        Function function = new Function("addProperty", Arrays.<Type>asList(_propertyName), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addPropertyMetadata(Utf8String _propertyName, Utf8String _key, Utf8String _value) {
        Function function = new Function("addPropertyMetadata", Arrays.<Type>asList(_propertyName, _key, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<Storage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Storage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Storage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Storage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Storage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Storage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Storage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Storage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
