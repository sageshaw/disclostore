package solids;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class Storage extends Contract {
    private static final String BINARY = "";

    private Storage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Storage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NoteEventResponse> getNoteEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Note",
                Arrays.asList(),
                Arrays.asList(new TypeReference <Address>() {
                }, new TypeReference <Utf8String>() {
                }));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NoteEventResponse> responses = new ArrayList<NoteEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NoteEventResponse typedResponse = new NoteEventResponse();
            typedResponse.addr = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.message = (Utf8String) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NoteEventResponse> noteEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Note",
                Arrays.asList(),
                Arrays.asList(new TypeReference <Address>() {
                }, new TypeReference <Utf8String>() {
                }));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NoteEventResponse>() {
            @Override
            public NoteEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NoteEventResponse typedResponse = new NoteEventResponse();
                typedResponse.addr = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.message = (Utf8String) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Future <TransactionReceipt> addFile(Utf8String _propertyName, Utf8String _fileName) {
        Function function = new Function("addFile", Arrays.asList(_propertyName, _fileName), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPropertyMetadata(Utf8String _propertyName, Utf8String _key) {
        Function function = new Function("getPropertyMetadata",
                Arrays.asList(_propertyName, _key),
                Arrays.asList(new TypeReference <Utf8String>() {
                }));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future <Utf8String> version() {
        Function function = new Function("version",
                Arrays.asList(),
                Arrays.asList(new TypeReference <Utf8String>() {
                }));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future <TransactionReceipt> uploadFile(Utf8String _propertyName, Utf8String _fileName, Bytes32 _data, Uint256 count) {
        Function function = new Function("uploadFile", Arrays.asList(_propertyName, _fileName, _data, count), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public Future <TransactionReceipt> checkPerms(Uint256 requiredPerms, Utf8String message) {
        Function function = new Function("checkPerms", Arrays.asList(requiredPerms, message), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> destroy() {
        Function function = new Function("destroy", Arrays.asList(), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public Future <Bytes32> getFile(Utf8String _propertyName, Utf8String _fileName, Uint256 count) {
        Function function = new Function("getFile",
                Arrays.asList(_propertyName, _fileName, count),
                Arrays.asList(new TypeReference <Bytes32>() {
                }));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addProperty(Utf8String _propertyName) {
        Function function = new Function("addProperty", Arrays.asList(_propertyName), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public Future <TransactionReceipt> addAccount(Address addr, Uint256 perms) {
        Function function = new Function("addAccount", Arrays.asList(addr, perms), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addPropertyMetadata(Utf8String _propertyName, Utf8String _key, Utf8String _value) {
        Function function = new Function("addPropertyMetadata", Arrays.asList(_propertyName, _key, _value), Collections.emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<Storage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Storage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Storage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Storage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Storage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Storage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Storage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Storage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NoteEventResponse {
        public Address addr;

        public Utf8String message;
    }
}
