package solids;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class Storage extends Contract {
    private static final String BINARY = "606060405261012c600055341561001557600080fd5b5b5b5b610f02806100276000396000f3006060604052361561008b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663248bfc3b8114610090578063300ebbf61461013757806358aa61e71461024257806383197ef0146102f05780638e84a8c114610305578063b48cc6e5146103ac578063f82fdff314610411578063ff30b71714610436575b600080fd5b341561009b57600080fd5b61012360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061051f95505050505050565b604051901515815260200160405180910390f35b341561014257600080fd5b6101ca60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061065495505050505050565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102075780820151818401525b6020016101ee565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024d57600080fd5b61012360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013593506107cb92505050565b604051901515815260200160405180910390f35b34156102fb57600080fd5b610303610a4d565b005b341561031057600080fd5b61039a60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505093359350610ae192505050565b60405190815260200160405180910390f35b34156103b757600080fd5b61012360046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610bc995505050505050565b604051901515815260200160405180910390f35b341561041c57600080fd5b61039a610c98565b60405190815260200160405180910390f35b341561044157600080fd5b61012360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610c9e95505050505050565b604051901515815260200160405180910390f35b600060206040519081016040526001846040518082805190602001908083835b6020831061055f57805182525b601f19909201916020918201910161053f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020836040518082805190602001908083835b602083106105c457805182525b601f1990920191602091820191016105a4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405150600080516020610eb78339815191529150604090505160208082526019908201527f46696c652063726561746564207375636365737366756c6c79000000000000006040808301919091526060909101905180910390a15060015b92915050565b61065c610e04565b6001836040518082805190602001908083835b6020831061068f57805182525b601f19909201916020918201910161066f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101826040518082805190602001908083835b602083106106f657805182525b601f1990920191602091820191016106d6565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107bd5780601f10610792576101008083540402835291602001916107bd565b820191906000526020600020905b8154815290600101906020018083116107a057829003601f168201915b505050505090505b92915050565b6000826001866040518082805190602001908083835b6020831061080157805182525b601f1990920191602091820191016107e1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020856040518082805190602001908083835b6020831061086657805182525b601f199092019160209182019101610846565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902060008481526020919091526040908190209190915583906001908790518082805190602001908083835b602083106108e457805182525b601f1990920191602091820191016108c4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020856040518082805190602001908083835b6020831061094957805182525b601f199092019160209182019101610929565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390206000848152602091909152604090205414156109ee57600080516020610eb78339815191526040516020808252601a908201527f46696c652075706c6f61646564207375636365737366756c6c790000000000006040808301919091526060909101905180910390a1506001610a45565b600080516020610eb783398151915260405160208082526015908201527f46696c65206661696c656420746f2075706c6f616400000000000000000000006040808301919091526060909101905180910390a15060005b949350505050565b600080516020610eb78339815191526040516020808252602a908201527f53656c66206465737472756374696e672e2e2e20676f6f646279652c206f6c646040808301919091527f20667269656e642e2e2e0000000000000000000000000000000000000000000060608301526080909101905180910390a13373ffffffffffffffffffffffffffffffffffffffff16ff5b565b60006001846040518082805190602001908083835b60208310610b1657805182525b601f199092019160209182019101610af6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020836040518082805190602001908083835b60208310610b7b57805182525b601f199092019160209182019101610b5b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390206000838152602091909152604090205490505b9392505050565b600060206040519081016040526001836040518082805190602001908083835b60208310610c0957805182525b601f199092019160209182019101610be9565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405150600080516020610eb7833981519152915060409050516020808252601d908201527f50726f70657274792063726561746564207375636365737366756c6c790000006040808301919091526060909101905180910390a15060015b919050565b60005481565b6000816001856040518082805190602001908083835b60208310610cd457805182525b601f199092019160209182019101610cb4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101846040518082805190602001908083835b60208310610d3b57805182525b601f199092019160209182019101610d1b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051610d7f929160200190610e16565b50600080516020610eb783398151915260405160208082526024908201527f50726f7065727479206d657461646174612061646465642073756363657373666040808301919091527f756c6c790000000000000000000000000000000000000000000000000000000060608301526080909101905180910390a15060015b9392505050565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e5757805160ff1916838001178555610e84565b82800160010185558215610e84579182015b82811115610e84578251825591602001919060010190610e69565b5b50610e91929150610e95565b5090565b610eb391905b80821115610e915760008155600101610e9b565b5090565b905600a274a9958297875ddcaa01ef5d7855baca2caf4a9f0aee26d717a4e2a490b6a2a165627a7a72305820370c854b8d4d832b8d90214a41a0eb401832813fe7c552cb93941f226483d6d00029";

    private Storage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Storage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NoteEventResponse> getNoteEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Note",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NoteEventResponse> responses = new ArrayList<NoteEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NoteEventResponse typedResponse = new NoteEventResponse();
            typedResponse.message = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NoteEventResponse> noteEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Note",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NoteEventResponse>() {
            @Override
            public NoteEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NoteEventResponse typedResponse = new NoteEventResponse();
                typedResponse.message = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<TransactionReceipt> addFile(Utf8String _propertyName, Utf8String _fileName) {
        Function function = new Function("addFile", Arrays.<Type>asList(_propertyName, _fileName), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPropertyMetadata(Utf8String _propertyName, Utf8String _key) {
        Function function = new Function("getPropertyMetadata", 
                Arrays.<Type>asList(_propertyName, _key), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> uploadFile(Utf8String _propertyName, Utf8String _fileName, Bytes32 _data, Uint256 count) {
        Function function = new Function("uploadFile", Arrays.<Type>asList(_propertyName, _fileName, _data, count), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> destroy() {
        Function function = new Function("destroy", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bytes32> getFile(Utf8String _propertyName, Utf8String _fileName, Uint256 count) {
        Function function = new Function("getFile", 
                Arrays.<Type>asList(_propertyName, _fileName, count), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addProperty(Utf8String _propertyName) {
        Function function = new Function("addProperty", Arrays.<Type>asList(_propertyName), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> verificationID() {
        Function function = new Function("verificationID",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addPropertyMetadata(Utf8String _propertyName, Utf8String _key, Utf8String _value) {
        Function function = new Function("addPropertyMetadata", Arrays.<Type>asList(_propertyName, _key, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<Storage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Storage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Storage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Storage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Storage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Storage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Storage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Storage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NoteEventResponse {
        public Utf8String message;
    }
}
